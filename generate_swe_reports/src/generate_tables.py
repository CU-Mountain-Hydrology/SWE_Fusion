"""
#TODO: docs
"""

#########################   These values should not need to be changed between runs, but may change depending on your
#         CONFIG        #   operating system, filepaths, and preferred output location.
#########################
ww_table_data = {
    "01" : "Pacific Northwest",
    "02" : "North Continental",
    "03" : "South Continental",
    "04" : "Intermountain",
}
#########################
#       END CONFIG      #
#########################

from utils import merge_swe_csv
import re
import glob
import os
from pathlib import Path
import pandas as pd
from jinja2 import Template, Environment, FileSystemLoader
import argparse


def interpret_ids(ids: str) -> list[str]:
    """
    Interprets the --tables regex flag

    :param ids: String value of the --tables flag as generated by parser.parse_args()
    :return: List of interpreted table IDs to generate tables for
    :rtype: list[str]
    """

    # Determine list of table IDs
    all_ids = set(ww_table_data.keys())

    # Parse the argument passed into --tables
    patterns = ids.split(",")
    id_list = set()

    for pattern in patterns:
        pattern = pattern.lower()
        # Shortcut search when all or no IDs are specified
        if pattern in ["all","."]:
            return sorted(all_ids)
        elif pattern in ["none",""]:
            return []

        # Modify regular expression syntax to better support * wildcard
        regex_pattern = "^" + re.escape(pattern).replace("\\*", ".*") + "$"
        regex = re.compile(regex_pattern)

        # Match the pattern against all possible IDs
        pattern_found = False
        for id in all_ids-id_list:
            if regex.match(id):
                id_list.add(id)
                pattern_found = True
        if not pattern_found:
            # Pattern does not match any name in all_ids
            if pattern == "0":
                raise Exception(f"--tables pattern '0' not recognized! Did you mean 'none'?")
            else:
                raise Exception(f"--tables pattern '{pattern}' not recognized!")

    return sorted(id_list)


def generate_ww_tables(date: int, ids: str, verbose: bool) -> None:
    # TODO: verbose
    """
    # TODO: docs
    """
    # Define output directory
    date_str = str(date)
    report_dir = fr"W:\documents\{date_str[:4]}_RT_Reports\{date_str}_RT_Report"
    use_this_dir = glob.glob(os.path.join(report_dir, "*UseThis"))[0]
    table_dir = os.path.join(use_this_dir, "Tables", "forUpload")
    output_tables_dir = Path(__file__).parent.parent / "output" / f"{date}_WW_TEXtables" # TODO: move up to config
    output_tables_dir.mkdir(parents=True, exist_ok=True)

    # Determine which tables to generate
    id_list = interpret_ids(ids)

    # Merge tables 04a and 04b into a single table
    if "04" in id_list:
        table04a = os.path.join(table_dir, f"INMT_{date}_Table04a.csv")
        table04b = os.path.join(table_dir, f"INMT_{date}_Table04b.csv")
        table04_output = os.path.join(table_dir, f"INMT_{date}_Table04.csv")
        if not os.path.exists(table04_output):
            merge_swe_csv(table04a, table04b, table04_output)

    # Generate tables
    for table_id in id_list:
        print(f"Generating table {table_id}...")

        matches = glob.glob(os.path.join(table_dir, f"*{table_id}.csv"))
        # TODO: error handling
        table = matches[0]

        # Get header data
        df = pd.read_csv(table)
        previous_date = df.iloc[0, 1].strip("%").replace(" Avg.", "")
        current_date = df.iloc[0, 2].strip("%").replace(" Avg.", "")
        headers = {
            "% of Average": [previous_date, current_date],
            "SWE (in)": [previous_date, current_date],
            "": ["SCA"],
            " ": ["Vol. (AF)"],
            "   ": ["Area (mi$^2$)"],
            "Pillows": [previous_date, current_date],
            "Surveys": [current_date],
        }

        # Load table template
        templates_dir = Path(__file__).parent.parent / "report_templates"
        env = Environment(loader=FileSystemLoader(str(templates_dir)))
        template = env.get_template("TEMPLATE_SWE_Table.tex")

        latex_table = template.render(df=df, title=ww_table_data[table_id], headers=headers, date=date_str)

        # Write table to LaTeX file in the output directory
        output_table = output_tables_dir / f"{date}_WW_Table{table_id}.tex"
        with open(output_table, "w") as f:
            f.write(latex_table)

def main():
    # Parse input arguments and flags, see top of file for argument usage examples
    parser = argparse.ArgumentParser()
    parser.add_argument("report_type", type=str, help="Acceptable report types: WW")
    parser.add_argument("date", type=int, help="Date to process (YYYYMMDD)")
    parser.add_argument("--tables", default="all", type=str, help="Regex pattern(s) for table IDs to generate")
    parser.add_argument("-v", "--verbose", action="store_true", help="Verbose output messages")
    args = parser.parse_args()

    match args.report_type:
        case "WW":
            generate_ww_tables(args.date, args.tables, args.verbose)
        case _:
            raise Exception(f"Unrecognized report type: {args.report_type}")

if __name__ == "__main__":
    main()