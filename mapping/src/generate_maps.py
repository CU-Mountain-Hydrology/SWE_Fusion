'''
Automatically generates report maps in ArcPy using post-processed rasters.

Usage: python generate_maps.py <report_type> <date> --figs=all --preview
    report_type: Type of report to generate. Currently supported types: WW
    date: Date of report, formatted as YYYYMMDD
    --figs (optional): Regular expression describing which figures to generate. ex. --figs=all, --figs=1a, --figs=1*,2a,3
    --preview (optional): Open the generated JPG maps upon completion
'''

import argparse
import re # Regular Expression
import arcpy
# from arcpy import env
from arcpy.sa import * # Spatial Analyst module

#########################
#         CONFIG        #
#########################
# TODO: config should not need to be changed for each run, but may vary based on system filepaths
# templateAprx = "M:/.../ReportTemplate.aprx"
# productSourceDir = f"M:/SWE/WestWide/{date}_..."
# jpgOutputDir = "../output/{date}_figs"

#########################
#       END CONFIG      #
#########################

'''
@brief Interprets the --figs regex flag
@param figs: String value of the --figs flag as generated by parser.parse_args()
@returns fig_list: List of figure names to generate maps for
'''
def interpret_figs(figs: str, reportType: str) -> list[str]:
    # Determine list of figures based on report type
    match reportType:
        case 'WW':
            all_figs = {"1a","1b","2a","2b","3","4","5","6"}
        case _:
            raise Exception(f"Unrecognized report type: {reportType}")

    # Parse the argument passed into --figs
    patterns = figs.split(",")
    fig_list = set()

    for pattern in patterns:
        # Shortcut search when all figs are specified
        if pattern in ["all","."]:
            return sorted(all_figs)

        # Modify regular expression syntax to better support * wildcard
        regex_pattern = "^" + re.escape(pattern).replace("\\*", ".*") + "$"
        regex = re.compile(regex_pattern)

        # Match the pattern against all possible figure names
        pattern_found = False
        for fig in all_figs-fig_list:
            if regex.match(fig):
                fig_list.add(fig)
                pattern_found = True
        if not pattern_found:
            # Pattern does not match any name in all_figs
            raise Exception(f"--figs pattern {pattern} not recognized!")

    return sorted(fig_list)

'''
@brief Creates a clone of the map template APRX file
'''
def cloneTemplate():
    pass

'''
@brief Sets the data source for the given figure
'''
def setDataSource(figure, new_data_source):
    pass

'''
@brief Exports the given layout to JPG
'''
def exportToJpg(layout):
    pass

''' 
@brief Parses inputs and generates appropriate maps
'''
# TODO: update function documentation
def main():
    # Parse input arguments and flags
    parser = argparse.ArgumentParser()
    parser.add_argument("report_type", type=str, help="Acceptable report types: WW")
    parser.add_argument("date", type=int, help="Date to process (YYYYMMDD)")
    parser.add_argument("--figs", default="all", type=str, help="Regex pattern(s) for figure names to generate")
    parser.add_argument("--preview", action="store_true", help="Preview the generated maps")
    args = parser.parse_args()

    # Interpret --figs flag and return a list of figure names to generate
    fig_list = interpret_figs(args.figs, args.report_type)
    print(fig_list)

#TODO
    # Parse file arguments and flags, as well as any config variables defined in this file
    # Check --figs != none
    # Generate temporary directory to store aprx files in
    # Open a copy of the template aprx file
    #   call cloneTemplate()
    # For each map in --figs:
    #   call setDataSource()
    #   call exportToJpg()
    # Save all jpgs to a subdirectory
    # If --preview open the jpg (option to go through one by one and generate as needed?)
    # Delete temporary directory and clean up any files (del aprx)

if __name__ == '__main__':
    main()