"""
Automatically generates report maps in ArcPy using post-processed rasters.

**Usage:**
    python generate_maps.py report_type date [--figs REGEX] [--preview]

**Arguments:**
    - ``report_type``: Type of report to generate (e.g., WW)
    - ``date``: Date of report in YYYYMMDD format

**Options:**
    - ``--figs REGEX``: Regex for figures to generate (default: all).
      Example: ``--figs 1a`` or ``--figs "1*,2a,3"``
    - ``--preview``, ``-p``: Open the generated JPG maps upon completion
    - ``--verbose``, ``-v``: Enable verbose output messages
"""


from zero_to_no_data import *
import argparse
import re # Regular Expression
import os # Operating System
import tempfile
import shutil
import arcpy
# from arcpy import env
from arcpy.sa import * # Spatial Analyst module

#########################
#         CONFIG        #
#########################
# TODO: config should not need to be changed for each run, but may vary based on system filepaths
template_aprx = "U:\EricG\MapTemplate\MapTemplate.aprx"
product_source_dir = r"U:\EricG\testing_Directory\20250331_RT_Report\fSCA_RT_CanAdj_rcn_noSW_wCCR_UseThis"
output_parent_dir = "../output/"

#########################
#       END CONFIG      #
#########################

'''
@brief Interprets the --figs regex flag
@param figs: String value of the --figs flag as generated by parser.parse_args()
@returns fig_list: List of figure names to generate maps for
'''
def interpret_figs(figs: str, reportType: str) -> list[str]:
    # Determine list of figures based on report type
    match reportType:
        case 'WW':
            all_figs = {"1a","1b","2a","2b","3","4","5","6"}
        case _:
            raise Exception(f"Unrecognized report type: {reportType}")

    # Parse the argument passed into --figs
    patterns = figs.split(",")
    fig_list = set()

    for pattern in patterns:
        # Shortcut search when all figs are specified
        if pattern in ["all","."]:
            return sorted(all_figs)

        # Modify regular expression syntax to better support * wildcard
        regex_pattern = "^" + re.escape(pattern).replace("\\*", ".*") + "$"
        regex = re.compile(regex_pattern)

        # Match the pattern against all possible figure names
        pattern_found = False
        for fig in all_figs-fig_list:
            if regex.match(fig):
                fig_list.add(fig)
                pattern_found = True
        if not pattern_found:
            # Pattern does not match any name in all_figs
            raise Exception(f"--figs pattern {pattern} not recognized!")

    return sorted(fig_list)


'''
@brief Sets the data source for the given figure
'''
def setDataSource(figure, new_data_source):
    pass

'''
@brief Exports the given layout to JPG
'''
def exportToJpg(layout):
    pass

''' 
@brief Parses inputs and generates appropriate maps
'''
# TODO: update function documentation
def main():
    # Parse input arguments and flags, see top of file for argument usage examples
    parser = argparse.ArgumentParser()
    parser.add_argument("report_type", type=str, help="Acceptable report types: WW")
    parser.add_argument("date", type=int, help="Date to process (YYYYMMDD)")
    parser.add_argument("--figs", default="all", type=str, help="Regex pattern(s) for figure names to generate")
    parser.add_argument("-p","--preview", action="store_true", help="Preview the generated maps")
    parser.add_argument("-v", "--verbose", action="store_true", help="Verbose output messages")
    args = parser.parse_args()

    # Interpret --figs flag and return a list of figure names to generate
    fig_list = interpret_figs(args.figs, args.report_type)

    # Clone the template aprx to a temporary directory
    temp_dir = tempfile.mkdtemp()
    working_aprx = os.path.join(temp_dir, "working_aprx.aprx")
    shutil.copyfile(template_aprx, working_aprx)
    aprx = arcpy.mp.ArcGISProject(working_aprx) # Open the working aprx in ArcPy
    # for fig in fig_list:
    if True:
        #TODO setDataSource(fig, new_source_file)
        fig1a_map = aprx.listMaps()[0]
        undefined_p8_layer = fig1a_map.listLayers("p8_*")[0]
        p8_symbology = undefined_p8_layer.symbology
        # p8_symbology_layer = arcpy.mp.LayerFile(r"C:\Users\craft\MountainHydrology\MapTemplate\LayerSymbology\p8_20250331_noneg_fsca_wccr.tif.lyrx")

        fig1a_map.removeLayer(undefined_p8_layer)

        new_p8_path = r"U:\EricG\testing_Directory\20250331_RT_Report\fSCA_RT_CanAdj_rcn_noSW_wCCR_UseThis\p8_20250331_noneg_copy_2.tif"
        # Check if new p8 raster contains 0 cells instead of NoData
        # if contains_zero_value_cells(new_p8_path):
        #     pass

        fig1a_map.addDataFromPath(new_p8_path)
        p8_layer = fig1a_map.listLayers("p8_*")[0]
        p8_layer.name = "p8_20250331_noneg"
        p8_layer.symbology = p8_symbology
        # p8_layer.symbology = p8_symbology_layer.listLayers()[0].symbology

        # sym = p8_layer.symbology
        # print(type(sym))
        # print(sym.renderer.type)
        # sym.noDataValues = [0.0]
        # p8_layer.symbology = sym

        fig1a = aprx.listLayouts()[0]

        fig1a.exportToJPEG(output_parent_dir+"\\"+fig1a.name+".jpg")

    # Clean up
    del aprx

#TODO
    # Open a copy of the template aprx file
    #   call cloneTemplate()
    # For each map in --figs:
    #   call setDataSource()
    #   call exportToJpg()
    # Save all jpgs to a subdirectory
    # If --preview open the jpg (option to go through one by one and generate as needed?)
    # Delete temporary directory and clean up any files (del aprx)

if __name__ == '__main__':
    main()